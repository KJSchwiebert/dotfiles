" My vimrc file for starters based on the 
" Example vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2019 Jan 26
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" Set case search so that if I type a capital I want case to matter otherwise 
" not.
set smartcase
syntax on
filetype plugin indent on
set nowrap
set colorcolumn=80

" Set hybrid line numbering (absolute line number of current line and relative
" line numbers for other line.
set number relativenumber

" Make it so that splitting always is below or to the right.
set splitbelow
set splitright

" Set a few nice key bindings
nnoremap Y y$
nnoremap <silent><C-l> :noh<CR>
nnoremap <CR> o<ESC>
nnoremap <Tab> <C-w>w
nnoremap <S-Tab> <C-w><C-p>
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap n nzz
nnoremap N Nzz
nnoremap X daw
nnoremap S ciw
tnoremap <C-n> <C-w>N
inoremap jj <ESC>l

" Block comment in cpp.
xnoremap gc <esc>mp`>a*/<esc>gv<esc>`<_i/*<esc>`p

" Block uncomment in cpp.
xnoremap gC <esc>mp`>h2x<esc>gv<esc>`<_2x<esc>`p

" Spell checking.
set spelllang=en_us
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

" Easy switching between buffers.
nnoremap gb :ls<CR>:b<space>

" Open and close NERDTree
nnoremap <c-b> :NERDTreeToggle<cr>

" Tabbing
set autoindent expandtab tabstop=4 shiftwidth=4 smartindent softtabstop=4

" Get plugins using the vim-plug plugin manager.
call plug#begin()

Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:coc_default_semantic_highlight_groups = 1

Plug 'jiangmiao/auto-pairs'

Plug 'morhetz/gruvbox'

Plug 'preservim/nerdtree'

Plug 'vim-airline/vim-airline'

Plug 'vim-airline/vim-airline-themes'
    let g:airline_theme='gruvbox'

Plug 'sirver/ultisnips'
    let g:UltiSnipsExpandTrigger = '<tab>'
    let g:UltiSnipsJumpForwardTrigger = '<tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

Plug 'lervag/vimtex'
    let g:tex_flavor='latex'
    let g:vimtex_view_method='zathura'
    let g:vimtex_quickfix_mode=0

Plug 'rhysd/vim-clang-format'

call plug#end()

" Stuff specific to coc.
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to
" enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
            \ CheckBackspace() ? "\<Tab>" :
                  \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~#
    '\s'
endfunction

" control space to force suggestion.
nnoremap <silent><expr> <c-@> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nnoremap <silent> <C-k> <Plug>(coc-diagnostic-prev)
nnoremap <silent> <C-j> <Plug>(coc-diagnostic-next)

" GoTo code navigation
nnoremap <silent> gd <Plug>(coc-definition)
nnoremap <silent> gy <Plug>(coc-type-definition)
nnoremap <silent> gi <Plug>(coc-implementation)
nnoremap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
 if CocAction('hasProvider', 'hover')
     call CocActionAsync('doHover')
       else
           call feedkeys('K', 'in')
             endif
endfunction

augroup my_colours
  autocmd!
  autocmd ColorScheme gruvbox hi SpellBad cterm=reverse
augroup END

" Set the colorscheme
autocmd vimenter * ++nested colorscheme gruvbox
set termguicolors
set background=dark    

" Open NERDTree on startup.
autocmd VimEnter * NERDTree

" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
  packadd! matchit
endif

