# Basic snippet support for latex files.

# This file is based on Gilles Castel. See the associated LISENCE file in this
# folder.
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def nonmath():
	return vim.eval('vimtex#syntax#in_mathzone()') == '0'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

# Snippets added by Kyle Schwiebert.
# Some of these were inspired by the latex suite plugin for Obsidian.md.
context "nonmath()"
snippet ndm "Numbered equation" wA
\begin{equation}
	${1:${VISUAL}}
	\label{eq:$2}
\end{equation} $0
endsnippet

context "nonmath()"
snippet col "color" w
{\\color{$1} ${2:${VISUAL}}}$0
endsnippet

context "math()"
snippet der "material derivative" wA
\\frac{d ${1:f}}{d ${2:t}}$0
endsnippet

priority 1
context "math()"
snippet mder "material derivative" wA
\\frac{\\partial ${1:f}}{\\partial ${2:t}}
+ ${3:\\mathbf{v}} \\cdot \\nabla${4:_{\\mathbf{x}}} $1 $0
endsnippet

context "math()"
snippet pder "partial derivative" wA
\\frac{\\partial ${1:f}}{\\partial ${2:t}}$0
endsnippet

priority 0
context "math()"
snippet _rm "roman text subscript" iA
_{\mathrm{$1}}$0
endsnippet

context "math()"
snippet conc "concentration of a chemical species" wA
\left[ \ce{$1}\right]$0
endsnippet

context "math()"
snippet ceq "colon equals definition" wA
\coloneqq
endsnippet

context "math()"
snippet td "to the ... power" iA
^
endsnippet

priority 0

# Non math snips.
context "nonmath()"
snippet frame "start new slide" bA
\\begin{frame}{\Large ${1:Title}}
	\centering
	$0
\\end{frame}
endsnippet

context "nonmath()"
snippet eref "equation ref" wA
(\\ref{eq:$1})$0
endsnippet

context "nonmath()"
snippet sec "new section" bA
\\section{$1}\\label{sec:${2:`!p snip.rv = t[1].replace(' ','_').lower()`}}
$0
endsnippet

context "nonmath()"
snippet ssec "new subsection" bA
\\subsection{$1}\\label{sbsec:${2:`!p snip.rv = t[1].partition(' ')[0].lower()`}}
$0
endsnippet

# Environments
# priority 1000
# context "env(itemize)"
# snippet item "item inside itemize" bA
# \\item
# endsnippet

# We would like to wrap any singleton letter in $$ automatically.
# Note that a, A, and I must be skipped.
# As an edge case, we do not expand this snippet after an apostrophe (single
# quote).
context "nonmath()"
snippet !\b(?<!')([b-zB-HJ-Z])(\W)! "single letter wrap in inline math" rwA
\$`!p snip.rv = match.group(1)`\$`!p snip.rv = match.group(2)`
endsnippet

# Wrap numbers in inline math automatically.
context "nonmath()"
snippet '\b(\d+)(\W)' "numbers inline" rwA
\$`!p snip.rv = match.group(1)`\$`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([lkjin])\1' "Easy index for common indicies" irA
_`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

priority 101
context "math()"
snippet '([\\\w]+)(tilde|bar|hat|dot)' "postfix modifier" rwA
\\`!p snip.rv = match.group(2)`{`!p snip.rv = match.group(1)`}
endsnippet

priority 101
context "math()"
snippet '([\\\w]+)bf' "postfix modifier" rwA
\\mathbf{`!p snip.rv = match.group(1)`}
endsnippet

priority 101
context "math()"
snippet '\b([A-Z])mcal' "postfix mathcal" rwA
\\mathcal{`!p snip.rv = match.group(1)`}$0
endsnippet

priority 100
context "math()"
snippet '(tilde|bar|hat|dot)' "visual modifier" rwA
\\`!p snip.rv = match.group(1)`{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet bf "visual modifier" wA
\\mathbf{${1:${VISUAL}}}$0
endsnippet

priority 100
context "math()"
snippet norm "norm" iA
\\left\\lVert ${1:${VISUAL}}\\right\\rVert$0
endsnippet

priority 200
context "math()"
snippet snorm "semi/Euclidian norm" iA
\\left\\lvert ${1:${VISUAL}}\\right\\rvert$0
endsnippet

priority 0
context "nonmath()"
snippet '(?<!\\)(epsilon|pi|beta|theta|zeta|phi|psi|tau|sigma|mu|nu|theta|zeta|rho|xi|alpha|omega|delta)(\W)' "Easy greek letters" rwA
$\\`!p snip.rv = match.group(1)`$`!p snip.rv = match.group(2)`
endsnippet

priority 0
context "nonmath()"
snippet '(?<!\\)(Theta|Zeta|Pi|Phi|Psi|Tau|Sigma|Mu|Nu|Theta|Zeta|Rho|Xi|Alpha|Omega|Delta)(\W)' "Easy greek letters" rwA
$\\`!p snip.rv = match.group(1)`$`!p snip.rv = match.group(2)`
endsnippet

# Two lowercase a are needed so that theta, zeta, beta, etc are not all messed
# up.
priority -1
context "nonmath()"
snippet '(?<!\\)eta(\W)' "Easy eta" rwA
$\\eta$`!p snip.rv = match.group(1)`
endsnippet

context "nonmath()"
snippet '(?<!\\)gam(\W)' "Easy gamma" rwA
$\\gamma$`!p snip.rv = match.group(1)`
endsnippet

context "nonmath()"
snippet '(?<!\\)Gam(\W)' "Easy gamma" rwA
$\\Gamma$`!p snip.rv = match.group(1)`
endsnippet

priority 0
context "math()"
snippet '(?<!\\)(pi|beta|theta|zeta|phi|psi|tau|sigma|mu|nu|theta|zeta|rho|xi|alpha|omega|delta)' "Easy greek letters" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 0
context "math()"
snippet '(?<!\\)(Theta|Zeta|Pi|Phi|Psi|Tau|Sigma|Mu|Nu|Theta|Zeta|Rho|Xi|Alpha|Omega|Delta)' "Easy greek letters" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

# Two lowercase a are needed so that theta, zeta, beta, etc are not all messed
# up.
context "math()"
snippet eta "Easy eta" wA
\\eta
endsnippet

context "math()"
snippet eps "Easy epsilon" wA
\\epsilon
endsnippet

context "math()"
snippet gam "Easy gamma" wA
\\gamma
endsnippet

context "math()"
snippet Gam "Easy gamma" wA
\\Gamma
endsnippet

priority 300
context "math()"
snippet lint "integral" wA
\int_{${1:-\infty}} ${2:${VISUAL}} \,d ${3:x} $0
endsnippet

priority 10
context "math()"
snippet '\|\|' "small |.|" rwA
\lvert $1 \rvert$0
endsnippet

# End of snippets added by Kyle Schwiebert.
# Although some of the below have been modified or deleted.

priority 0
snippet template "Basic template" b
\documentclass[letterpaper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{hyperref}
\usepackage{textcomp}
\usepackage{amsmath, amssymb}
\usepackage{mathtools}
\usepackage[margin = 1in]{geometry}
\usepackage[sorting=none]{biblatex}
\addbibresource{${1:./bibliograophy.bib}}

% Hack for annoying extra space around \left .. \right delimiters.
% See https://tex.stackexchange.com/questions/2607/spacing-around-left-and-right
\let\originalleft\left
\let\originalright\right
\renewcommand{\left}{\mathopen{}\mathclose\bgroup\originalleft}
\renewcommand{\right}{\aftergroup\egroup\originalright}

% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

% Front matter
\title{$2}
\author{${3:Kyle J. Schwiebert}}
\date{${4:\\today}}

\begin{document}

\maketitle

$5
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "dots" iA
\dots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $1
\end{enumerate}$0
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $1
\end{itemize}$0
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ',':']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\begin{equation*}
	${1:${VISUAL}}
\end{equation*} $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet neq "equals" wA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix}
	$1
\end{pmatrix}$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix}
	$1
\end{bmatrix}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right$0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\$0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right$0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{${1:i}=${2:1}}^{${3:\infty}} ${4:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "thereexists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabla "nabla" iA
\nabla
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} \,d ${4:x} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\varnothing
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet QQ "Q" iA
\mathbb{Q}
endsnippet

snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

# vim:ft=snippets
